//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleUI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayer.DataContract")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRestfulService")]
    public interface IRestfulService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetAllJsonData", ReplyAction="http://tempuri.org/IRestfulService/GetAllJsonDataResponse")]
        ConsoleUI.ServiceReference1.CompositeType[] GetAllJsonData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetAllJsonData", ReplyAction="http://tempuri.org/IRestfulService/GetAllJsonDataResponse")]
        System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetAllJsonDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetJsonData", ReplyAction="http://tempuri.org/IRestfulService/GetJsonDataResponse")]
        ConsoleUI.ServiceReference1.CompositeType[] GetJsonData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetJsonData", ReplyAction="http://tempuri.org/IRestfulService/GetJsonDataResponse")]
        System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetJsonDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetXmlData", ReplyAction="http://tempuri.org/IRestfulService/GetXmlDataResponse")]
        ConsoleUI.ServiceReference1.CompositeType[] GetXmlData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/GetXmlData", ReplyAction="http://tempuri.org/IRestfulService/GetXmlDataResponse")]
        System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetXmlDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/AddData", ReplyAction="http://tempuri.org/IRestfulService/AddDataResponse")]
        ConsoleUI.ServiceReference1.CompositeType AddData(ConsoleUI.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/AddData", ReplyAction="http://tempuri.org/IRestfulService/AddDataResponse")]
        System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType> AddDataAsync(ConsoleUI.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/DeleteData", ReplyAction="http://tempuri.org/IRestfulService/DeleteDataResponse")]
        bool DeleteData(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/DeleteData", ReplyAction="http://tempuri.org/IRestfulService/DeleteDataResponse")]
        System.Threading.Tasks.Task<bool> DeleteDataAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/UpdateData", ReplyAction="http://tempuri.org/IRestfulService/UpdateDataResponse")]
        bool UpdateData(string id, ConsoleUI.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestfulService/UpdateData", ReplyAction="http://tempuri.org/IRestfulService/UpdateDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateDataAsync(string id, ConsoleUI.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRestfulServiceChannel : ConsoleUI.ServiceReference1.IRestfulService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestfulServiceClient : System.ServiceModel.ClientBase<ConsoleUI.ServiceReference1.IRestfulService>, ConsoleUI.ServiceReference1.IRestfulService {
        
        public RestfulServiceClient() {
        }
        
        public RestfulServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RestfulServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestfulServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestfulServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleUI.ServiceReference1.CompositeType[] GetAllJsonData() {
            return base.Channel.GetAllJsonData();
        }
        
        public System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetAllJsonDataAsync() {
            return base.Channel.GetAllJsonDataAsync();
        }
        
        public ConsoleUI.ServiceReference1.CompositeType[] GetJsonData(string value) {
            return base.Channel.GetJsonData(value);
        }
        
        public System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetJsonDataAsync(string value) {
            return base.Channel.GetJsonDataAsync(value);
        }
        
        public ConsoleUI.ServiceReference1.CompositeType[] GetXmlData(string value) {
            return base.Channel.GetXmlData(value);
        }
        
        public System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType[]> GetXmlDataAsync(string value) {
            return base.Channel.GetXmlDataAsync(value);
        }
        
        public ConsoleUI.ServiceReference1.CompositeType AddData(ConsoleUI.ServiceReference1.CompositeType composite) {
            return base.Channel.AddData(composite);
        }
        
        public System.Threading.Tasks.Task<ConsoleUI.ServiceReference1.CompositeType> AddDataAsync(ConsoleUI.ServiceReference1.CompositeType composite) {
            return base.Channel.AddDataAsync(composite);
        }
        
        public bool DeleteData(string id) {
            return base.Channel.DeleteData(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDataAsync(string id) {
            return base.Channel.DeleteDataAsync(id);
        }
        
        public bool UpdateData(string id, ConsoleUI.ServiceReference1.CompositeType composite) {
            return base.Channel.UpdateData(id, composite);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDataAsync(string id, ConsoleUI.ServiceReference1.CompositeType composite) {
            return base.Channel.UpdateDataAsync(id, composite);
        }
    }
}
